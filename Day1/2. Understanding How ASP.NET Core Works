Understanding How ASP.NET Core Works

ASP.NET Core is a modern, cross-platform framework for building high-performance web applications. At its core, it is a .NET application that is bootstrapped through a Program.cs file. 
This file plays a central role in configuring the web application, setting up services, defining middleware, and establishing request-handling endpoints.

1. Basic Web Application Structure
At its simplest, an ASP.NET Core app uses a minimal hosting model with the following setup in Program.cs:

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/", () => "Hello World!");

app.Run();

Explanation:
CreateBuilder(args): Initializes the application with default configurations.
Build(): Constructs the app pipeline and prepares it to handle requests.
MapGet(): Defines a GET endpoint for the root path (/) that returns a "Hello World!" message.
Run(): Starts the web server and begins listening for incoming requests.

2. Building Interactive UI with Blazor
Blazor is an integral part of ASP.NET Core used to create rich, client-side web interfaces using C# instead of JavaScript. 
Blazor components are reusable, stateful, and support event handling.

Example Component - Counter.razor:

@page "/counter"
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p>Current count: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}

Key Points:
@page: Specifies the route for the component.
@onclick: Binds a method to a button click event.
@code: Defines the C# logic behind the component.
This component updates the count in real-time and can be embedded in other pages using <Counter />.

3. Creating APIs with Minimal Code
ASP.NET Core makes it easy to build RESTful APIs with minimal boilerplate using Minimal APIs.

Example:
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/hello", () => "Hello, World!");

app.Run();
MapGet("/hello", ...): Registers an endpoint that responds with "Hello, World!" when accessed via HTTP GET at /hello.
This approach is lightweight and ideal for microservices and small APIs.

4. Middleware and Request Pipeline
ASP.NET Core uses a pipeline of middleware components to handle HTTP requests and responses. 
This modular approach provides flexibility, allowing you to customize and extend your application's functionality by adding or removing middleware components as needed.

The middleware pipeline processes HTTP requests in a sequential manner, ensuring that each component can perform its designated task before passing 
the request to the next component in the pipeline.

Example Middleware Setup:
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.UseHttpsRedirection();         // Redirects to HTTPS
app.UseRouting();                  // Enables endpoint routing
app.MapStaticAssets();            // Serves static files
app.UseAuthentication();          // Adds authentication middleware
app.UseAuthorization();           // Adds authorization middleware

app.MapGet("/", () => "Hello World!");

app.Run();

In the previous code, several common middleware components were added:
UseHttpsRedirection: Redirects HTTP requests to HTTPS.
UseRouting: Enables routing to map requests to endpoints.
MapStaticAssets: Optimizes the delivery of static files such as HTML, CSS, JavaScript, images and other assets.
UseAuthentication: Adds authentication capabilities.
UseAuthorization: Adds authorization capabilities.
app.MapGet: This is a simple endpoint to demonstrate that the application is running.


5. Dependency Injection (DI)

ASP.NET Core includes built-in support for dependency injection (DI) for configuring services that are used by the app and its various framework components.

For example, you might want to centrally configure a service using a framework like EntityFramework Core that other parts of your app depend on to access a database. 
You can configure a database context from EntityFramework Core as a service using dependency injection like this:

ASP.NET Core has first-class support for Dependency Injection, enabling loose coupling and testability.

Example: Registering DbContext:

public class MyDbContext : DbContext
{
    public MyDbContext(DbContextOptions<MyDbContext> options) : base(options) { }
    public DbSet<Product> Products { get; set; } = default!;
}

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<MyDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

var app = builder.Build();

app.Run();
AddDbContext<T>(): Registers the EF Core database context as a service.
This context can then be injected into controllers or services where database access is needed.

With the previous code:

A DbContext is configured as a service using dependency injection.
The WebApplicationBuilder is used to configure the app.
The AddDbContext method registers the DbContext with the dependency injection container.
The connection string is retrieved from the configuration and used to set up the database context.

6. Configuration Management
ASP.NET Core applications can pull configuration settings from multiple sources, including JSON files, environment variables, and command-line arguments.

Example appsettings.json:
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=MyDatabase;Trusted_Connection=True;"
  }
}

Using Configuration in Program.cs:
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<MyDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

var app = builder.Build();
app.Run();
Configuration is accessed via builder.Configuration, and services are wired up using values from config files.

With the previous code:
The connection string is configured in the appsettings.json file.
The WebApplicationBuilder is used to configure the app.
The AddDbContext method registers the DbContext with the dependency injection container.
The connection string is retrieved from the configuration and used to set up the database context.


7. Monitoring, Diagnostics, and Observability
ASP.NET Core includes several features to help monitor and diagnose your application effectively:

Key Features:
Built-in Metrics: Measure request counts, error rates, and response times.
Flexible Logging: Integrates with logging providers (Console, Debug, Azure, etc.).
Distributed Tracing: Track how requests flow across services (e.g., with Activity/TraceId).
OpenTelemetry Integration: Collect telemetry data such as traces, logs, and metrics using industry-standard APIs.
Health Checks API: Report on the health of databases, services, or any app dependency.
Diagnostic Tools: Tools like dotnet-trace, dotnet-dump, and dotnet-counters allow real-time debugging and performance analysis.
These diagnostics tools help ensure that your application runs smoothly in production environments and aids in troubleshooting issues faster.

Conclusion
ASP.NET Core is a comprehensive, scalable, and high-performance framework for modern web development. 
With its unified approach to building web UIs, APIs, and services—alongside built-in support for middleware, configuration, DI, 
and diagnostics—it empowers developers to create robust and maintainable applications efficiently.
